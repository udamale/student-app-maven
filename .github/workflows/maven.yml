name: CI / CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'        # or 'adopt', etc.
          java-version: '11'

      - name: Build and package (skip tests)
        run: mvn clean package -DskipTests

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # If SonarQube needs URL, set as secret or variable
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn sonar:sonar \
               -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
               -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

      - name: Wait for Quality Gate
        # This part might require using a GitHub Action for waiting QG or custom script
        # Using “SonarCloud” has built-in support; for self-hosted you might poll
        uses: cachix/wait-for-quality-gate-action@v1
        with:
          projectKey: your_project_key_here
          token: ${{ secrets.SONAR_TOKEN }}
          timeout: 300  # seconds

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()                # only deploy if the build & quality gate passed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build with tests (or skip if not needed)
        run: mvn clean package

      - name: Deploy WAR to Tomcat
        env:
          TOMCAT_USER: ${{ secrets.TOMCAT_USER }}
          TOMCAT_PASSWORD: ${{ secrets.TOMCAT_PASSWORD }}
          TOMCAT_HOST: ${{ secrets.TOMCAT_HOST }}
        run: |
          WAR_FILE=$(ls target/*.war | head -n 1)
          echo "Deploying WAR $WAR_FILE to Tomcat"
          curl --fail -u $TOMCAT_USER:$TOMCAT_PASSWORD \
            -T $WAR_FILE \
            "http://$TOMCAT_HOST/manager/text/deploy?path=/student-app&update=true"
